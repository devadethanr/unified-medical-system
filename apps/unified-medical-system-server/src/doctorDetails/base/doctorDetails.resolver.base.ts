/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DoctorDetails } from "./DoctorDetails";
import { DoctorDetailsCountArgs } from "./DoctorDetailsCountArgs";
import { DoctorDetailsFindManyArgs } from "./DoctorDetailsFindManyArgs";
import { DoctorDetailsFindUniqueArgs } from "./DoctorDetailsFindUniqueArgs";
import { CreateDoctorDetailsArgs } from "./CreateDoctorDetailsArgs";
import { UpdateDoctorDetailsArgs } from "./UpdateDoctorDetailsArgs";
import { DeleteDoctorDetailsArgs } from "./DeleteDoctorDetailsArgs";
import { DoctorDetailsService } from "../doctorDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DoctorDetails)
export class DoctorDetailsResolverBase {
  constructor(
    protected readonly service: DoctorDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DoctorDetails",
    action: "read",
    possession: "any",
  })
  async _doctorDetailsItemsMeta(
    @graphql.Args() args: DoctorDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DoctorDetails])
  @nestAccessControl.UseRoles({
    resource: "DoctorDetails",
    action: "read",
    possession: "any",
  })
  async doctorDetailsItems(
    @graphql.Args() args: DoctorDetailsFindManyArgs
  ): Promise<DoctorDetails[]> {
    return this.service.doctorDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DoctorDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DoctorDetails",
    action: "read",
    possession: "own",
  })
  async doctorDetails(
    @graphql.Args() args: DoctorDetailsFindUniqueArgs
  ): Promise<DoctorDetails | null> {
    const result = await this.service.doctorDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DoctorDetails)
  @nestAccessControl.UseRoles({
    resource: "DoctorDetails",
    action: "create",
    possession: "any",
  })
  async createDoctorDetails(
    @graphql.Args() args: CreateDoctorDetailsArgs
  ): Promise<DoctorDetails> {
    return await this.service.createDoctorDetails({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DoctorDetails)
  @nestAccessControl.UseRoles({
    resource: "DoctorDetails",
    action: "update",
    possession: "any",
  })
  async updateDoctorDetails(
    @graphql.Args() args: UpdateDoctorDetailsArgs
  ): Promise<DoctorDetails | null> {
    try {
      return await this.service.updateDoctorDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DoctorDetails)
  @nestAccessControl.UseRoles({
    resource: "DoctorDetails",
    action: "delete",
    possession: "any",
  })
  async deleteDoctorDetails(
    @graphql.Args() args: DeleteDoctorDetailsArgs
  ): Promise<DoctorDetails | null> {
    try {
      return await this.service.deleteDoctorDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
