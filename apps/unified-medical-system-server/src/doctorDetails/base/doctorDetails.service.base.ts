/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DoctorDetails as PrismaDoctorDetails } from "@prisma/client";

export class DoctorDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DoctorDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.doctorDetails.count(args);
  }

  async doctorDetailsItems(
    args: Prisma.DoctorDetailsFindManyArgs
  ): Promise<PrismaDoctorDetails[]> {
    return this.prisma.doctorDetails.findMany(args);
  }
  async doctorDetails(
    args: Prisma.DoctorDetailsFindUniqueArgs
  ): Promise<PrismaDoctorDetails | null> {
    return this.prisma.doctorDetails.findUnique(args);
  }
  async createDoctorDetails(
    args: Prisma.DoctorDetailsCreateArgs
  ): Promise<PrismaDoctorDetails> {
    return this.prisma.doctorDetails.create(args);
  }
  async updateDoctorDetails(
    args: Prisma.DoctorDetailsUpdateArgs
  ): Promise<PrismaDoctorDetails> {
    return this.prisma.doctorDetails.update(args);
  }
  async deleteDoctorDetails(
    args: Prisma.DoctorDetailsDeleteArgs
  ): Promise<PrismaDoctorDetails> {
    return this.prisma.doctorDetails.delete(args);
  }
}
