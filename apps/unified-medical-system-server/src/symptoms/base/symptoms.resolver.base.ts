/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Symptoms } from "./Symptoms";
import { SymptomsCountArgs } from "./SymptomsCountArgs";
import { SymptomsFindManyArgs } from "./SymptomsFindManyArgs";
import { SymptomsFindUniqueArgs } from "./SymptomsFindUniqueArgs";
import { CreateSymptomsArgs } from "./CreateSymptomsArgs";
import { UpdateSymptomsArgs } from "./UpdateSymptomsArgs";
import { DeleteSymptomsArgs } from "./DeleteSymptomsArgs";
import { SymptomsService } from "../symptoms.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Symptoms)
export class SymptomsResolverBase {
  constructor(
    protected readonly service: SymptomsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Symptoms",
    action: "read",
    possession: "any",
  })
  async _symptomsItemsMeta(
    @graphql.Args() args: SymptomsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Symptoms])
  @nestAccessControl.UseRoles({
    resource: "Symptoms",
    action: "read",
    possession: "any",
  })
  async symptomsItems(
    @graphql.Args() args: SymptomsFindManyArgs
  ): Promise<Symptoms[]> {
    return this.service.symptomsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Symptoms, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Symptoms",
    action: "read",
    possession: "own",
  })
  async symptoms(
    @graphql.Args() args: SymptomsFindUniqueArgs
  ): Promise<Symptoms | null> {
    const result = await this.service.symptoms(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Symptoms)
  @nestAccessControl.UseRoles({
    resource: "Symptoms",
    action: "create",
    possession: "any",
  })
  async createSymptoms(
    @graphql.Args() args: CreateSymptomsArgs
  ): Promise<Symptoms> {
    return await this.service.createSymptoms({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Symptoms)
  @nestAccessControl.UseRoles({
    resource: "Symptoms",
    action: "update",
    possession: "any",
  })
  async updateSymptoms(
    @graphql.Args() args: UpdateSymptomsArgs
  ): Promise<Symptoms | null> {
    try {
      return await this.service.updateSymptoms({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Symptoms)
  @nestAccessControl.UseRoles({
    resource: "Symptoms",
    action: "delete",
    possession: "any",
  })
  async deleteSymptoms(
    @graphql.Args() args: DeleteSymptomsArgs
  ): Promise<Symptoms | null> {
    try {
      return await this.service.deleteSymptoms(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
