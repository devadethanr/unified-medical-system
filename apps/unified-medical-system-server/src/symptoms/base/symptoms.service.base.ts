/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Symptoms as PrismaSymptoms } from "@prisma/client";

export class SymptomsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SymptomsCountArgs, "select">): Promise<number> {
    return this.prisma.symptoms.count(args);
  }

  async symptomsItems(
    args: Prisma.SymptomsFindManyArgs
  ): Promise<PrismaSymptoms[]> {
    return this.prisma.symptoms.findMany(args);
  }
  async symptoms(
    args: Prisma.SymptomsFindUniqueArgs
  ): Promise<PrismaSymptoms | null> {
    return this.prisma.symptoms.findUnique(args);
  }
  async createSymptoms(
    args: Prisma.SymptomsCreateArgs
  ): Promise<PrismaSymptoms> {
    return this.prisma.symptoms.create(args);
  }
  async updateSymptoms(
    args: Prisma.SymptomsUpdateArgs
  ): Promise<PrismaSymptoms> {
    return this.prisma.symptoms.update(args);
  }
  async deleteSymptoms(
    args: Prisma.SymptomsDeleteArgs
  ): Promise<PrismaSymptoms> {
    return this.prisma.symptoms.delete(args);
  }
}
