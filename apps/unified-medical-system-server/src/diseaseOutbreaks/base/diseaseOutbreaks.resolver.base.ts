/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DiseaseOutbreaks } from "./DiseaseOutbreaks";
import { DiseaseOutbreaksCountArgs } from "./DiseaseOutbreaksCountArgs";
import { DiseaseOutbreaksFindManyArgs } from "./DiseaseOutbreaksFindManyArgs";
import { DiseaseOutbreaksFindUniqueArgs } from "./DiseaseOutbreaksFindUniqueArgs";
import { CreateDiseaseOutbreaksArgs } from "./CreateDiseaseOutbreaksArgs";
import { UpdateDiseaseOutbreaksArgs } from "./UpdateDiseaseOutbreaksArgs";
import { DeleteDiseaseOutbreaksArgs } from "./DeleteDiseaseOutbreaksArgs";
import { DiseaseOutbreaksService } from "../diseaseOutbreaks.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DiseaseOutbreaks)
export class DiseaseOutbreaksResolverBase {
  constructor(
    protected readonly service: DiseaseOutbreaksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DiseaseOutbreaks",
    action: "read",
    possession: "any",
  })
  async _diseaseOutbreaksItemsMeta(
    @graphql.Args() args: DiseaseOutbreaksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DiseaseOutbreaks])
  @nestAccessControl.UseRoles({
    resource: "DiseaseOutbreaks",
    action: "read",
    possession: "any",
  })
  async diseaseOutbreaksItems(
    @graphql.Args() args: DiseaseOutbreaksFindManyArgs
  ): Promise<DiseaseOutbreaks[]> {
    return this.service.diseaseOutbreaksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DiseaseOutbreaks, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DiseaseOutbreaks",
    action: "read",
    possession: "own",
  })
  async diseaseOutbreaks(
    @graphql.Args() args: DiseaseOutbreaksFindUniqueArgs
  ): Promise<DiseaseOutbreaks | null> {
    const result = await this.service.diseaseOutbreaks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiseaseOutbreaks)
  @nestAccessControl.UseRoles({
    resource: "DiseaseOutbreaks",
    action: "create",
    possession: "any",
  })
  async createDiseaseOutbreaks(
    @graphql.Args() args: CreateDiseaseOutbreaksArgs
  ): Promise<DiseaseOutbreaks> {
    return await this.service.createDiseaseOutbreaks({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiseaseOutbreaks)
  @nestAccessControl.UseRoles({
    resource: "DiseaseOutbreaks",
    action: "update",
    possession: "any",
  })
  async updateDiseaseOutbreaks(
    @graphql.Args() args: UpdateDiseaseOutbreaksArgs
  ): Promise<DiseaseOutbreaks | null> {
    try {
      return await this.service.updateDiseaseOutbreaks({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiseaseOutbreaks)
  @nestAccessControl.UseRoles({
    resource: "DiseaseOutbreaks",
    action: "delete",
    possession: "any",
  })
  async deleteDiseaseOutbreaks(
    @graphql.Args() args: DeleteDiseaseOutbreaksArgs
  ): Promise<DiseaseOutbreaks | null> {
    try {
      return await this.service.deleteDiseaseOutbreaks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
