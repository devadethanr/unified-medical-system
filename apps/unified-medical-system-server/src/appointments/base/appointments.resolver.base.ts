/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Appointments } from "./Appointments";
import { AppointmentsCountArgs } from "./AppointmentsCountArgs";
import { AppointmentsFindManyArgs } from "./AppointmentsFindManyArgs";
import { AppointmentsFindUniqueArgs } from "./AppointmentsFindUniqueArgs";
import { CreateAppointmentsArgs } from "./CreateAppointmentsArgs";
import { UpdateAppointmentsArgs } from "./UpdateAppointmentsArgs";
import { DeleteAppointmentsArgs } from "./DeleteAppointmentsArgs";
import { AppointmentsService } from "../appointments.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Appointments)
export class AppointmentsResolverBase {
  constructor(
    protected readonly service: AppointmentsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Appointments",
    action: "read",
    possession: "any",
  })
  async _appointmentsItemsMeta(
    @graphql.Args() args: AppointmentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Appointments])
  @nestAccessControl.UseRoles({
    resource: "Appointments",
    action: "read",
    possession: "any",
  })
  async appointmentsItems(
    @graphql.Args() args: AppointmentsFindManyArgs
  ): Promise<Appointments[]> {
    return this.service.appointmentsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Appointments, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Appointments",
    action: "read",
    possession: "own",
  })
  async appointments(
    @graphql.Args() args: AppointmentsFindUniqueArgs
  ): Promise<Appointments | null> {
    const result = await this.service.appointments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Appointments)
  @nestAccessControl.UseRoles({
    resource: "Appointments",
    action: "create",
    possession: "any",
  })
  async createAppointments(
    @graphql.Args() args: CreateAppointmentsArgs
  ): Promise<Appointments> {
    return await this.service.createAppointments({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Appointments)
  @nestAccessControl.UseRoles({
    resource: "Appointments",
    action: "update",
    possession: "any",
  })
  async updateAppointments(
    @graphql.Args() args: UpdateAppointmentsArgs
  ): Promise<Appointments | null> {
    try {
      return await this.service.updateAppointments({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Appointments)
  @nestAccessControl.UseRoles({
    resource: "Appointments",
    action: "delete",
    possession: "any",
  })
  async deleteAppointments(
    @graphql.Args() args: DeleteAppointmentsArgs
  ): Promise<Appointments | null> {
    try {
      return await this.service.deleteAppointments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
