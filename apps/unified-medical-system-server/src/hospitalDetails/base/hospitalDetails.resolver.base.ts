/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HospitalDetails } from "./HospitalDetails";
import { HospitalDetailsCountArgs } from "./HospitalDetailsCountArgs";
import { HospitalDetailsFindManyArgs } from "./HospitalDetailsFindManyArgs";
import { HospitalDetailsFindUniqueArgs } from "./HospitalDetailsFindUniqueArgs";
import { CreateHospitalDetailsArgs } from "./CreateHospitalDetailsArgs";
import { UpdateHospitalDetailsArgs } from "./UpdateHospitalDetailsArgs";
import { DeleteHospitalDetailsArgs } from "./DeleteHospitalDetailsArgs";
import { HospitalDetailsService } from "../hospitalDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HospitalDetails)
export class HospitalDetailsResolverBase {
  constructor(
    protected readonly service: HospitalDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HospitalDetails",
    action: "read",
    possession: "any",
  })
  async _hospitalDetailsItemsMeta(
    @graphql.Args() args: HospitalDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HospitalDetails])
  @nestAccessControl.UseRoles({
    resource: "HospitalDetails",
    action: "read",
    possession: "any",
  })
  async hospitalDetailsItems(
    @graphql.Args() args: HospitalDetailsFindManyArgs
  ): Promise<HospitalDetails[]> {
    return this.service.hospitalDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HospitalDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HospitalDetails",
    action: "read",
    possession: "own",
  })
  async hospitalDetails(
    @graphql.Args() args: HospitalDetailsFindUniqueArgs
  ): Promise<HospitalDetails | null> {
    const result = await this.service.hospitalDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HospitalDetails)
  @nestAccessControl.UseRoles({
    resource: "HospitalDetails",
    action: "create",
    possession: "any",
  })
  async createHospitalDetails(
    @graphql.Args() args: CreateHospitalDetailsArgs
  ): Promise<HospitalDetails> {
    return await this.service.createHospitalDetails({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HospitalDetails)
  @nestAccessControl.UseRoles({
    resource: "HospitalDetails",
    action: "update",
    possession: "any",
  })
  async updateHospitalDetails(
    @graphql.Args() args: UpdateHospitalDetailsArgs
  ): Promise<HospitalDetails | null> {
    try {
      return await this.service.updateHospitalDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HospitalDetails)
  @nestAccessControl.UseRoles({
    resource: "HospitalDetails",
    action: "delete",
    possession: "any",
  })
  async deleteHospitalDetails(
    @graphql.Args() args: DeleteHospitalDetailsArgs
  ): Promise<HospitalDetails | null> {
    try {
      return await this.service.deleteHospitalDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
