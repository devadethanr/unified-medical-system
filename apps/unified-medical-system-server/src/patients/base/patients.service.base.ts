/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Patients as PrismaPatients } from "@prisma/client";

export class PatientsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PatientsCountArgs, "select">): Promise<number> {
    return this.prisma.patients.count(args);
  }

  async patientsItems(
    args: Prisma.PatientsFindManyArgs
  ): Promise<PrismaPatients[]> {
    return this.prisma.patients.findMany(args);
  }
  async patients(
    args: Prisma.PatientsFindUniqueArgs
  ): Promise<PrismaPatients | null> {
    return this.prisma.patients.findUnique(args);
  }
  async createPatients(
    args: Prisma.PatientsCreateArgs
  ): Promise<PrismaPatients> {
    return this.prisma.patients.create(args);
  }
  async updatePatients(
    args: Prisma.PatientsUpdateArgs
  ): Promise<PrismaPatients> {
    return this.prisma.patients.update(args);
  }
  async deletePatients(
    args: Prisma.PatientsDeleteArgs
  ): Promise<PrismaPatients> {
    return this.prisma.patients.delete(args);
  }
}
