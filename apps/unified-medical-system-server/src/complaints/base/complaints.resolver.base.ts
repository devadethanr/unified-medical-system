/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Complaints } from "./Complaints";
import { ComplaintsCountArgs } from "./ComplaintsCountArgs";
import { ComplaintsFindManyArgs } from "./ComplaintsFindManyArgs";
import { ComplaintsFindUniqueArgs } from "./ComplaintsFindUniqueArgs";
import { CreateComplaintsArgs } from "./CreateComplaintsArgs";
import { UpdateComplaintsArgs } from "./UpdateComplaintsArgs";
import { DeleteComplaintsArgs } from "./DeleteComplaintsArgs";
import { ComplaintsService } from "../complaints.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Complaints)
export class ComplaintsResolverBase {
  constructor(
    protected readonly service: ComplaintsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Complaints",
    action: "read",
    possession: "any",
  })
  async _complaintsItemsMeta(
    @graphql.Args() args: ComplaintsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Complaints])
  @nestAccessControl.UseRoles({
    resource: "Complaints",
    action: "read",
    possession: "any",
  })
  async complaintsItems(
    @graphql.Args() args: ComplaintsFindManyArgs
  ): Promise<Complaints[]> {
    return this.service.complaintsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Complaints, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Complaints",
    action: "read",
    possession: "own",
  })
  async complaints(
    @graphql.Args() args: ComplaintsFindUniqueArgs
  ): Promise<Complaints | null> {
    const result = await this.service.complaints(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Complaints)
  @nestAccessControl.UseRoles({
    resource: "Complaints",
    action: "create",
    possession: "any",
  })
  async createComplaints(
    @graphql.Args() args: CreateComplaintsArgs
  ): Promise<Complaints> {
    return await this.service.createComplaints({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Complaints)
  @nestAccessControl.UseRoles({
    resource: "Complaints",
    action: "update",
    possession: "any",
  })
  async updateComplaints(
    @graphql.Args() args: UpdateComplaintsArgs
  ): Promise<Complaints | null> {
    try {
      return await this.service.updateComplaints({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Complaints)
  @nestAccessControl.UseRoles({
    resource: "Complaints",
    action: "delete",
    possession: "any",
  })
  async deleteComplaints(
    @graphql.Args() args: DeleteComplaintsArgs
  ): Promise<Complaints | null> {
    try {
      return await this.service.deleteComplaints(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
