/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Complaints as PrismaComplaints } from "@prisma/client";

export class ComplaintsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplaintsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complaints.count(args);
  }

  async complaintsItems(
    args: Prisma.ComplaintsFindManyArgs
  ): Promise<PrismaComplaints[]> {
    return this.prisma.complaints.findMany(args);
  }
  async complaints(
    args: Prisma.ComplaintsFindUniqueArgs
  ): Promise<PrismaComplaints | null> {
    return this.prisma.complaints.findUnique(args);
  }
  async createComplaints(
    args: Prisma.ComplaintsCreateArgs
  ): Promise<PrismaComplaints> {
    return this.prisma.complaints.create(args);
  }
  async updateComplaints(
    args: Prisma.ComplaintsUpdateArgs
  ): Promise<PrismaComplaints> {
    return this.prisma.complaints.update(args);
  }
  async deleteComplaints(
    args: Prisma.ComplaintsDeleteArgs
  ): Promise<PrismaComplaints> {
    return this.prisma.complaints.delete(args);
  }
}
