/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MedicalRecords as PrismaMedicalRecords } from "@prisma/client";

export class MedicalRecordsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MedicalRecordsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.medicalRecords.count(args);
  }

  async medicalRecordsItems(
    args: Prisma.MedicalRecordsFindManyArgs
  ): Promise<PrismaMedicalRecords[]> {
    return this.prisma.medicalRecords.findMany(args);
  }
  async medicalRecords(
    args: Prisma.MedicalRecordsFindUniqueArgs
  ): Promise<PrismaMedicalRecords | null> {
    return this.prisma.medicalRecords.findUnique(args);
  }
  async createMedicalRecords(
    args: Prisma.MedicalRecordsCreateArgs
  ): Promise<PrismaMedicalRecords> {
    return this.prisma.medicalRecords.create(args);
  }
  async updateMedicalRecords(
    args: Prisma.MedicalRecordsUpdateArgs
  ): Promise<PrismaMedicalRecords> {
    return this.prisma.medicalRecords.update(args);
  }
  async deleteMedicalRecords(
    args: Prisma.MedicalRecordsDeleteArgs
  ): Promise<PrismaMedicalRecords> {
    return this.prisma.medicalRecords.delete(args);
  }
}
