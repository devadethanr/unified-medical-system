/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PatientDetails as PrismaPatientDetails } from "@prisma/client";

export class PatientDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PatientDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.patientDetails.count(args);
  }

  async patientDetailsItems(
    args: Prisma.PatientDetailsFindManyArgs
  ): Promise<PrismaPatientDetails[]> {
    return this.prisma.patientDetails.findMany(args);
  }
  async patientDetails(
    args: Prisma.PatientDetailsFindUniqueArgs
  ): Promise<PrismaPatientDetails | null> {
    return this.prisma.patientDetails.findUnique(args);
  }
  async createPatientDetails(
    args: Prisma.PatientDetailsCreateArgs
  ): Promise<PrismaPatientDetails> {
    return this.prisma.patientDetails.create(args);
  }
  async updatePatientDetails(
    args: Prisma.PatientDetailsUpdateArgs
  ): Promise<PrismaPatientDetails> {
    return this.prisma.patientDetails.update(args);
  }
  async deletePatientDetails(
    args: Prisma.PatientDetailsDeleteArgs
  ): Promise<PrismaPatientDetails> {
    return this.prisma.patientDetails.delete(args);
  }
}
