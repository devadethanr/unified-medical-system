/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Feedbacks as PrismaFeedbacks } from "@prisma/client";

export class FeedbacksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeedbacksCountArgs, "select">
  ): Promise<number> {
    return this.prisma.feedbacks.count(args);
  }

  async feedbacksItems(
    args: Prisma.FeedbacksFindManyArgs
  ): Promise<PrismaFeedbacks[]> {
    return this.prisma.feedbacks.findMany(args);
  }
  async feedbacks(
    args: Prisma.FeedbacksFindUniqueArgs
  ): Promise<PrismaFeedbacks | null> {
    return this.prisma.feedbacks.findUnique(args);
  }
  async createFeedbacks(
    args: Prisma.FeedbacksCreateArgs
  ): Promise<PrismaFeedbacks> {
    return this.prisma.feedbacks.create(args);
  }
  async updateFeedbacks(
    args: Prisma.FeedbacksUpdateArgs
  ): Promise<PrismaFeedbacks> {
    return this.prisma.feedbacks.update(args);
  }
  async deleteFeedbacks(
    args: Prisma.FeedbacksDeleteArgs
  ): Promise<PrismaFeedbacks> {
    return this.prisma.feedbacks.delete(args);
  }
}
