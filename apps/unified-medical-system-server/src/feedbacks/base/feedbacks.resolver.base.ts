/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Feedbacks } from "./Feedbacks";
import { FeedbacksCountArgs } from "./FeedbacksCountArgs";
import { FeedbacksFindManyArgs } from "./FeedbacksFindManyArgs";
import { FeedbacksFindUniqueArgs } from "./FeedbacksFindUniqueArgs";
import { CreateFeedbacksArgs } from "./CreateFeedbacksArgs";
import { UpdateFeedbacksArgs } from "./UpdateFeedbacksArgs";
import { DeleteFeedbacksArgs } from "./DeleteFeedbacksArgs";
import { FeedbacksService } from "../feedbacks.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Feedbacks)
export class FeedbacksResolverBase {
  constructor(
    protected readonly service: FeedbacksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Feedbacks",
    action: "read",
    possession: "any",
  })
  async _feedbacksItemsMeta(
    @graphql.Args() args: FeedbacksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Feedbacks])
  @nestAccessControl.UseRoles({
    resource: "Feedbacks",
    action: "read",
    possession: "any",
  })
  async feedbacksItems(
    @graphql.Args() args: FeedbacksFindManyArgs
  ): Promise<Feedbacks[]> {
    return this.service.feedbacksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Feedbacks, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Feedbacks",
    action: "read",
    possession: "own",
  })
  async feedbacks(
    @graphql.Args() args: FeedbacksFindUniqueArgs
  ): Promise<Feedbacks | null> {
    const result = await this.service.feedbacks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Feedbacks)
  @nestAccessControl.UseRoles({
    resource: "Feedbacks",
    action: "create",
    possession: "any",
  })
  async createFeedbacks(
    @graphql.Args() args: CreateFeedbacksArgs
  ): Promise<Feedbacks> {
    return await this.service.createFeedbacks({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Feedbacks)
  @nestAccessControl.UseRoles({
    resource: "Feedbacks",
    action: "update",
    possession: "any",
  })
  async updateFeedbacks(
    @graphql.Args() args: UpdateFeedbacksArgs
  ): Promise<Feedbacks | null> {
    try {
      return await this.service.updateFeedbacks({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Feedbacks)
  @nestAccessControl.UseRoles({
    resource: "Feedbacks",
    action: "delete",
    possession: "any",
  })
  async deleteFeedbacks(
    @graphql.Args() args: DeleteFeedbacksArgs
  ): Promise<Feedbacks | null> {
    try {
      return await this.service.deleteFeedbacks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
