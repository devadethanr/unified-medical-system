/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LabResults } from "./LabResults";
import { LabResultsCountArgs } from "./LabResultsCountArgs";
import { LabResultsFindManyArgs } from "./LabResultsFindManyArgs";
import { LabResultsFindUniqueArgs } from "./LabResultsFindUniqueArgs";
import { CreateLabResultsArgs } from "./CreateLabResultsArgs";
import { UpdateLabResultsArgs } from "./UpdateLabResultsArgs";
import { DeleteLabResultsArgs } from "./DeleteLabResultsArgs";
import { LabResultsService } from "../labResults.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LabResults)
export class LabResultsResolverBase {
  constructor(
    protected readonly service: LabResultsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LabResults",
    action: "read",
    possession: "any",
  })
  async _labResultsItemsMeta(
    @graphql.Args() args: LabResultsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LabResults])
  @nestAccessControl.UseRoles({
    resource: "LabResults",
    action: "read",
    possession: "any",
  })
  async labResultsItems(
    @graphql.Args() args: LabResultsFindManyArgs
  ): Promise<LabResults[]> {
    return this.service.labResultsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LabResults, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LabResults",
    action: "read",
    possession: "own",
  })
  async labResults(
    @graphql.Args() args: LabResultsFindUniqueArgs
  ): Promise<LabResults | null> {
    const result = await this.service.labResults(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LabResults)
  @nestAccessControl.UseRoles({
    resource: "LabResults",
    action: "create",
    possession: "any",
  })
  async createLabResults(
    @graphql.Args() args: CreateLabResultsArgs
  ): Promise<LabResults> {
    return await this.service.createLabResults({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LabResults)
  @nestAccessControl.UseRoles({
    resource: "LabResults",
    action: "update",
    possession: "any",
  })
  async updateLabResults(
    @graphql.Args() args: UpdateLabResultsArgs
  ): Promise<LabResults | null> {
    try {
      return await this.service.updateLabResults({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LabResults)
  @nestAccessControl.UseRoles({
    resource: "LabResults",
    action: "delete",
    possession: "any",
  })
  async deleteLabResults(
    @graphql.Args() args: DeleteLabResultsArgs
  ): Promise<LabResults | null> {
    try {
      return await this.service.deleteLabResults(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
