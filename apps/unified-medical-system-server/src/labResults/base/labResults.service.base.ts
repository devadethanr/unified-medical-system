/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LabResults as PrismaLabResults } from "@prisma/client";

export class LabResultsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LabResultsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.labResults.count(args);
  }

  async labResultsItems(
    args: Prisma.LabResultsFindManyArgs
  ): Promise<PrismaLabResults[]> {
    return this.prisma.labResults.findMany(args);
  }
  async labResults(
    args: Prisma.LabResultsFindUniqueArgs
  ): Promise<PrismaLabResults | null> {
    return this.prisma.labResults.findUnique(args);
  }
  async createLabResults(
    args: Prisma.LabResultsCreateArgs
  ): Promise<PrismaLabResults> {
    return this.prisma.labResults.create(args);
  }
  async updateLabResults(
    args: Prisma.LabResultsUpdateArgs
  ): Promise<PrismaLabResults> {
    return this.prisma.labResults.update(args);
  }
  async deleteLabResults(
    args: Prisma.LabResultsDeleteArgs
  ): Promise<PrismaLabResults> {
    return this.prisma.labResults.delete(args);
  }
}
