/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Doctors as PrismaDoctors } from "@prisma/client";

export class DoctorsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DoctorsCountArgs, "select">): Promise<number> {
    return this.prisma.doctors.count(args);
  }

  async doctorsItems(
    args: Prisma.DoctorsFindManyArgs
  ): Promise<PrismaDoctors[]> {
    return this.prisma.doctors.findMany(args);
  }
  async doctors(
    args: Prisma.DoctorsFindUniqueArgs
  ): Promise<PrismaDoctors | null> {
    return this.prisma.doctors.findUnique(args);
  }
  async createDoctors(args: Prisma.DoctorsCreateArgs): Promise<PrismaDoctors> {
    return this.prisma.doctors.create(args);
  }
  async updateDoctors(args: Prisma.DoctorsUpdateArgs): Promise<PrismaDoctors> {
    return this.prisma.doctors.update(args);
  }
  async deleteDoctors(args: Prisma.DoctorsDeleteArgs): Promise<PrismaDoctors> {
    return this.prisma.doctors.delete(args);
  }
}
