/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Doctors } from "./Doctors";
import { DoctorsCountArgs } from "./DoctorsCountArgs";
import { DoctorsFindManyArgs } from "./DoctorsFindManyArgs";
import { DoctorsFindUniqueArgs } from "./DoctorsFindUniqueArgs";
import { CreateDoctorsArgs } from "./CreateDoctorsArgs";
import { UpdateDoctorsArgs } from "./UpdateDoctorsArgs";
import { DeleteDoctorsArgs } from "./DeleteDoctorsArgs";
import { DoctorsService } from "../doctors.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Doctors)
export class DoctorsResolverBase {
  constructor(
    protected readonly service: DoctorsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Doctors",
    action: "read",
    possession: "any",
  })
  async _doctorsItemsMeta(
    @graphql.Args() args: DoctorsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Doctors])
  @nestAccessControl.UseRoles({
    resource: "Doctors",
    action: "read",
    possession: "any",
  })
  async doctorsItems(
    @graphql.Args() args: DoctorsFindManyArgs
  ): Promise<Doctors[]> {
    return this.service.doctorsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Doctors, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Doctors",
    action: "read",
    possession: "own",
  })
  async doctors(
    @graphql.Args() args: DoctorsFindUniqueArgs
  ): Promise<Doctors | null> {
    const result = await this.service.doctors(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Doctors)
  @nestAccessControl.UseRoles({
    resource: "Doctors",
    action: "create",
    possession: "any",
  })
  async createDoctors(
    @graphql.Args() args: CreateDoctorsArgs
  ): Promise<Doctors> {
    return await this.service.createDoctors({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Doctors)
  @nestAccessControl.UseRoles({
    resource: "Doctors",
    action: "update",
    possession: "any",
  })
  async updateDoctors(
    @graphql.Args() args: UpdateDoctorsArgs
  ): Promise<Doctors | null> {
    try {
      return await this.service.updateDoctors({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Doctors)
  @nestAccessControl.UseRoles({
    resource: "Doctors",
    action: "delete",
    possession: "any",
  })
  async deleteDoctors(
    @graphql.Args() args: DeleteDoctorsArgs
  ): Promise<Doctors | null> {
    try {
      return await this.service.deleteDoctors(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
